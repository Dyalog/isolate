Implementation notes

All contained in a single ns-tree - #.isolate - but aim to be relocatable as:

      '#.isolate' #.myns.⎕CY 'isolate'

The isolate proxy returned by New is a container space created by ⎕NS in the caller having had 1∘(700⌶) applied to it.
It contains the special functions: "iSyntax" & "iEvaluate", additional function iSend and a number of namespaces.

The structure of the ns-tree has the main public fns and ops in the top level space - isolate - while most of the rest is in sub-space - ynys - (Welsh, island, cognate with insular, isolate &c.) and beginning with "y" it's at least at the bottom of autocomplete leaving the fns and ops at the top. The public fns are generated at build time from list (..ynys.publicMethods'') to call their homonyms in ynys and some of them are replicated in the root with names to suggest the primitives and derivations they model.

The first time in a session that any isolates are created a function -Init - is run that creates a number of sub-spaces in ynys that contain constant or variable arrays to be used by 

Data spaces:

session - created and populated by Init, it contains all constants & variables except those in:
options - created and populated by setDefaults, it contains all user options. Maintained by Config.

Tables:

session.procs
      stores process instances and contact details in four columns:
          proc-id; proc-inst(0); host-addr; port-no
proc-id   integer incremented from zero when a process is started or made available.
proc-inst instance of APLProcess if local or 0 placeholder if remote
host-addr IP-address of machine where is process
port-no   port-number on which process listening; incremented from first available multiple of 7051

session.assoc
      actually another data space or dictionary.
for each isolate:
iso    a unique numeric id      
proc   as proc-id in session.procs
busy   flag whether proxy currently awaiting response from isolate.
seq    iso-id of first isolate in "group" created under IÏ (llEach).

isolate-id  integer incremented from "random" seed; also in iD namespace in proxy and sent to isolate; names remote space as: 'IsoNNNN'
proc-id     as session.procs


Functions:
--
StartServer                                             r←StartServer ⍵
Run an isolate server on one machine to be used by one or more others.
This must be the first use of the isolate namespace in the session.
  Output should be similar to:
,------------------------------------------------------------------------,
|      isolate.StartServer''                                             |
|Server 'ISO7051', listening on port 7051                                |
| Handler thread started: 1                                              |
| Thread 1 is now handing server 'ISO7051'.                              |
|                                                                        |
| IP Address:  192.168.0.2                                               |
| IP Ports:    7052 7053 7054 7055                                       |
|                                                                        |
|Enter the following in another session, in one or more another machines:|
|                                                                        |
|      #.isolate.AddServer '192.168.0.2' (7052-⎕IO-⍳4)                   |
'------------------------------------------------------------------------'

AddServer                                                r← AddServer ⍵
use isolate server started in another machine
⍵         address ports
address   ip-address of host where isolates will reside.
ports     ports listening for isolate creation and execution.
  The argument will be given as output from the session in the server machine when started with:
      isolate.StartServer''
Multiple servers can be started in different machines and used by one or vice versa depending on resources available.
isolates can be used as usual with New, llEach &c. but expressions will be evaluated in the other machine.

New                                                      r←New ⍵
models isolate primitive: ¤
⍵         source
source    code ∧/∨ data to be copied to isolate.
          ref or namelist expected to be qualified relative to caller.
caller    space from which this fn was called.
          when this is primitive both source & caller will be a matter of course.
←         proxy
proxy     visible component of isolate.
          anonymous space child of caller.
          contains copies of iSyntax & iEvaluate, and refs - iSource to source, iCaller to the caller, iSpace to this space, iCarus - an instance of the "suicide" class and iD - containing the isolate id, the DRC client id, the port and the remote process id.

Config                                                r← Config ⍵
query or set configuration options.
⍵         '' | name | name value
name      one of params defined in setDefaults
value     new value for param
←         ⍵:''            : table of all names and values
          ⍵:name          : value
          ⍵:name value    : old value having set new in param
Config should normally be run before any isolate processes are created to ensure non-default values are honoured.
Once any isolates have been created all but "debug" have been used and will e ignored.
e.g.
,----------------------,
|      isolate.Config''|
| debug             0  |
| drc               #  |
| listen            0  |
| processes         1  |
| processors        4  |
| runtime           0  |
| status       client  |
| workspace   isolate  |
'----------------------'
--
Operators:
--
ll                                                    r←⍺ (⍺⍺ ll) ⍵
parallel - models ⍺ ⍺⍺∥ ⍵
⍺     optional left argument to ⍺⍺
⍺⍺    function to run in an ephemeral isolate.
⍵     right arg to ⍺⍺
←     future - result of ⍺⍺ execured in isolate.

llEach                                                r←⍺ (⍺⍺ llEach) ⍵
parallel each - models ⍺ ⍺⍺∥¨ ⍵
⍺     optional array itemwise compatible with ⍵; it's items are in the left domain of ⍺⍺.
⍺⍺    function presumed to be ambivalent or dyadic if ⍺ is supplied or monadic if not.
⍵     array whose items are in the right domain of ⍺⍺.
←     array of futures with shape ←→ ⍴⍺⊢¨⍵ or ⍴⍵

llOuter                                              r←⍺ (⍺⍺ llOuter) ⍵
parallel outer product - models ⍺ ∘.(⍺⍺∥) ⍵
⍺     array whose items are in the left domain of ⍺⍺.
⍺⍺    dyadic function applied between all possible pairs of items of ⍺ and ⍵
⍵     array whose items are in the right domain of ⍺⍺.
←     the result is an array of futures with shape ←→ (⍴⍺),⍴⍵

llKey                                               r←⍺ (⍺⍺ llKey) ⍵
parallel key - models ⍺ (⍺⍺∥⌸⍵⍵) ⍵
⍺     optional array ; if present has same first dimension as ⍵ and its major cells are possibly repeated keys.
      if missing recall with: ⍵ ∇ ⍳≢⍵
⍺⍺    ambivalent function to be applied for each unique key between a single key and the cells of ⍵ corresponding to all incidences of the key in ⍺.
⍵     array in the right domain of ⍺⍺
←     array of futures with shape as the number of unique keys each item being a single result of ⍺⍺.
To emulate key (⌸) completely it should mix (↑) the results.
This CANNOT BE DONE here as it dereferences the futures.

llRank                                             r←⍺ (⍺⍺ llRank ⍵⍵) ⍵
parallel rank - models ⍺ (⍺⍺∥⍤⍵⍵) ⍵
⍺     optional array framewise compatible with ⍵; it's cells as defined by ⍵⍵ are in the left domain of ⍺⍺.
⍺⍺    function presumed to be ambivalent or dyadic if ⍺ is supplied or monadic if not.
⍵⍵    integer scalar or 1, 2 or 3 item vector defining the ranks of the cells to or between which function ⍺⍺ will be applied.
⍵     array whose cells as defined by ⍵⍵ are in the right domain of ⍺⍺
←     array of futures with shape determined by combination of ⍵⍵ and the sapes of ⍺ amd/or ⍵
⍺⍺ is applied between corresponding cells of ⍺ and ⍵ or to the cells of ⍵.
To emulate rank (⍤) completely it should mix (↑) the results.
This CANNOT BE DONE here as it dereferences the futures.
-----------------------------------------------------------------
Internals

iSyntax - copied to proxy
return name class and syntax code of supplied name

⍵         simple name, word or "()" or "{}" delimited expression, adjascent to the dot in iso.whatever
←         class, syntax
class     ⎕NC of name in isolate.
          "(...)" - 3
          "{...}" - 3
          "⎕..."  - 2 or 3 according {}
syntax    2⊥1= result ambivalent dyadic rarg 0 0
--------------------------------------------------------------------------
iEvaluate - copied to proxy
execute expression supplied to isolate

⍺    | ⍵ - n is the syntax code supplied by "syntax"
     |
     | 2 n arrayname
     | 2 n arrayname newvalue
     | 2 n arrayname (PropertyArguments : Indexers IndexersSpecified)
     | 2 n arrayname (PropertyArguments : Indexers IndexersSpecified
     |                NewValue)
     | 3 n niladname
     | 3 n (expression)
     | 3 n {monad} rarg
larg | 3 n {dyad} rarg
     | 3 n monadname rarg
larg | 3 n dyadname rarg

RPCServer only permits a monadic fname and rarg to an existing function in the remote ws so we give it 'execute' with nested vector rarg as:
a | b      | c       | d    | e
0 | array  |         |      |
0 | nilad  |         |      |
0 | (expr) |         |      |
1 | monad  | rarg    |      |
2 | larg   | dyad    | rarg |
3 | array  | value   |      |
4 | array  | indices | axes |
5 | array  | indices | axes | value

If the expression causes an error that is trapped in the remote
process it is passed back as ⎕EN ⎕DM that is signalled .
--------------------------------
Configuration options
(from the setDefaults private function:
,------------------------------------------------------------------------------,
|   options.debug←0                           ⍝ cut back on error              |
|   options.drc←#                             ⍝ copy into # if # and missing   |
|   options.workspace←'isolate'               ⍝ load current ws for remotes?   |
|   options.listen←0                          ⍝ can isolate call back to ws    |
|   options.processors←processors 4           ⍝ no. processors                 |
|   options.processes←1                       ⍝ per processor                  |
|   options.runtime←'R'∊3⊃'.'⎕WG'APLVersion'  ⍝ use runtime version unless devt|
|   options.status←'client'                   ⍝ set as 'server' by StartServer |
'------------------------------------------------------------------------------'
debug:
All public fns and ops set an error guard as:
     trapErr''::signal''
If options.debug is 0 (the default) then trapErr'' returns 0 so all errors are trapped and signalled back to the session.
If 1 then trapErr'' is ⍬, there is no trap and errors are signalled at the point of error.

drc:
If drc is # (the default) we check to see if #.DRC exists and copy if not. Otherwise drc must be a ref to the extant DRC namespace.

workspace:
This is the workspace to be ⎕LOADed by APLProcess (default "isolate") that must contain the isolate namespace and call 'isolate.ynys.isoStart ⍬' in its ⎕LX. It should be in one of the folders defined in [Options]-[Configure...]-[Workspace] in the session menubar or be specified with a full path.

listen:
Whether the isolates will be enabled to call back to the active ws to request further data &c. (default 0.)
When enabled an "instance" of RPCServer is created locally to receive requests from the isolates.
Such requests are issued to the "parent" of the remote isolate accessed as ##. which is enabled as an isolate in its own right.

processors:
The number of prosessors in the machine. Currently available from Windows but default 4 elsewhere.

processes:
The number of processes that will be started per prosessor in the machine. (default 1.)

runtime:
Whether the runtime equivalent of the active interpreter should be started for the slave processes. If the active interpreter (the default) is runtime then runtime anyway.

status:
Set by StartServer and AddServer.

